/*
  Adapter to the ZGEBullet Library, a wrapper for the Bullet Physics Library.
  http://bulletphysics.org

  Download Windows DLL and Android shared library from
  http://code.google.com/p/zgebullet/downloads

  Copyright (c) 2012 Radovan Cervenka
*/

// Global constants

// boolean
const int FALSE = 0;
const int TRUE = 1;

// rotation-related
const float PIx2 = PI * 2; // 360 degrees
const float PI2 = PI / 2; // 90 degrees
const float PI3 = PI / 3; // 60 degrees
const float PI4 = PI / 4; // 45 degrees
const float PI6 = PI / 6; // 30 degrees
const float ROT360 = 1.0; // 360 degrees
const float ROT180 = 0.5; // 180 degrees
const float ROT120 = 0.3333; // 120 degrees
const float ROT90 = 0.25; // 90 degrees
const float ROT60 = 0.1666; // 60 degrees
const float ROT45 = 0.125; // 45 degrees
const float ROT30 = 0.0833; // 30 degrees

// triangle mesh types
const int CONVEX_HULL_MESH = 1;
const int CONCAVE_STATIC_MESH = 2;
const int CONCAVE_DEFORMABLE_MESH = 3;

// data types for heightfield data
const int FLOAT = 0;
const int INTEGER = 1;

// activation states
const int ACTIVE_TAG = 1;
const int DISABLE_DEACTIVATION = 4;
const int DISABLE_SIMULATION = 5;
const int ISLAND_SLEEPING = 2;
const int WANTS_DEACTIVATION = 3;

// limit default values
const float DEFAULT_HINGE_SOFTNESS = 0.9;
const float DEFAULT_HINGE_BIAS_FACTOR = 0.3;
const float DEFAULT_HINGE_RELAXATION_FACTOR = 1.0;
const float DEFAULT_CONE_TWIST_SOFTNESS = 0.8;
const float DEFAULT_CONE_TWIST_BIAS_FACTOR = 0.3;
const float DEFAULT_CONE_TWIST_RELAXATION_FACTOR = 1.0;
const int AXIS_X_LINEAR = 0;
const int AXIS_Y_LINEAR = 1;
const int AXIS_Z_LINEAR = 2;
const int AXIS_X_ANGULAR = 3;
const int AXIS_Y_ANGULAR = 4;
const int AXIS_Z_ANGULAR = 5;


// World

int zbtCreateWorld() {}

int zbtDestroyWorld() {}

int zbtSetWorldGravity(float x, float y, float z) {}

int zbtStepSimulation(float timeStep, int maxSubSteps, float fixedTimeStep) {}

// Collision shapes

int zbtCreateStaticPlaneShape(float normalX, float normalY, float normalZ,
  float planeConstant) {}

int zbtCreateBoxShape(float x, float y, float z) {}

int zbtCreateSphereShape(float radius) {}

int zbtCreateScalableSphereShape(float radius) {}

int zbtCreateConeShape(float radius, float height) {}

int zbtCreateCylinderShape(float radius, float height) {}

int zbtCreateCapsuleShape(float radius, float height) {}

int zbtCreateCompoundShape() {}

int zbtAddChildShape(int compoundId, int childId, float x, float y, float z,
  float rx, float ry, float rz) {}

int zbtRemoveChildShape(int compoundId, int childId) {}

int zbtCreateHeightfieldTerrainShape(xptr heightfieldData, int dataType,
  int width, int length, float heightScale, float minHeight, float maxHeight,
  int upAxis, int bFlipQuadEdges, int bDiamondSubdivision) {}

int zbtCreateConvexHullShape(xptr points, int numPoints) {}

int zbtCreateMultiSphereShape(xptr positions, xptr radiuses, int num) {}

int zbtStartTriangleMeshShape() {}

int zbtAddTriangle(float x1,float y1,float z1,
	float x2,float y2,float z2,float x3,float y3,float z3) {}

int zbtFinishTriangleMeshShape(int meshType) {}

int zbtSetShapeLocalScaling(int shapeId, float x, float y, float z) {}

int zbtSetShapeMargin(int shapeId, float margin) {}

int zbtDeleteShape(int shapeId) {}

int zbtDeleteAllShapes() {}

// Rigid bodies

int zbtAddRigidBody(float mass, int shapeId, float x, float y, float z,
  float rx, float ry, float rz) {}

int zbtDeleteRigidBody(int rigidBodyId) {}

int zbtSetMass(int rigidBodyId, float mass) {}

int zbtSetDamping(int rigidBodyId, float linDamping, float angDamping) {}

int zbtSetLinearFactor(int rigidBodyId, float x, float y, float z) {}

int zbtSetAngularFactor(int rigidBodyId, float x, float y, float z) {}

int zbtSetGravity(int rigidBodyId, float x, float y, float z) {}

int zbtGetLinearVelocity(int rigidBodyId, ref float x, ref float y, ref float z) {}

int zbtSetLinearVelocity(int rigidBodyId, float x, float y, float z) {}

int zbtGetAngularVelocity(int rigidBodyId, ref float x, ref float y, ref float z) {}

int zbtSetAngularVelocity(int rigidBodyId, float x, float y, float z) {}

int zbtApplyCentralImpulse(int rigidBodyId, float x, float y, float z) {}

int zbtApplyTorqueImpulse(int rigidBodyId, float rx, float ry, float rz) {}

int zbtApplyImpulse(int rigidBodyId, float x, float y, float z,
  float relX, float relY, float relZ) {}

// Constraints and limits

int zbtAreConnected(int rigidBodyAId, int rigidBodyBId) {}

int zbtAddPoint2PointConstraint(int rigidBodyAId, int rigidBodyBId,
	float pivotAx, float pivotAy, float pivotAz,
	float pivotBx, float pivotBy, float pivotBz, int bDisableCollision) {}

int zbtAddPoint2PointConstraint1(int rigidBodyId,
  float pivotX, float pivotY, float pivotZ, int bDisableCollision) {}

int zbtAddHingeConstraint(int rigidBodyAId, int rigidBodyBId,
	float pivotAx, float pivotAy, float pivotAz,
	float pivotBx, float pivotBy, float pivotBz,
	float axisAx, float axisAy, float axisAz,
	float axisBx, float axisBy, float axisBz, int bDisableCollision) {}

int zbtAddHingeConstraint1(int rigidBodyId,
	float pivotX, float pivotY, float pivotZ,
	float axisX, float axisY, float axisZ, int bDisableCollision) {}

int zbtSetHingeLimits(int constraintId, float low, float high,
	float softness, float biasFactor, float relaxationFactor) {}

int zbtEnableHingeAngularMotor(int constraintId, int bEnableMotor,
  float targetVelocity, float maxMotorImpulse) {}

int zbtAddConeTwistConstraint(int rigidBodyAId, int rigidBodyBId,
	float pivotAx, float pivotAy, float pivotAz,
	float pivotBx, float pivotBy, float pivotBz,
	float rotAx, float rotAy, float rotAz,
	float rotBx, float rotBy, float rotBz, int bDisableCollision) {}

int zbtAddConeTwistConstraint1(int rigidBodyId,
	float pivotX, float pivotY, float pivotZ,
	float rotX, float rotY, float rotZ, int bDisableCollision) {}

int zbtSetConeTwistLimits(int constraintId,
  float swingX, float swingY, float swingZ,
	float softness, float biasFactor, float relaxationFactor) {}

int zbtAddSliderConstraint(int rigidBodyAId, int rigidBodyBId,
	float pivotAx, float pivotAy, float pivotAz,
	float pivotBx, float pivotBy, float pivotBz,
	float rotAx, float rotAy, float rotAz,
	float rotBx, float rotBy, float rotBz, int bUseLinearReferenceFrameA,
  int bDisableCollision) {}

int zbtSetSliderLimits(int constraintId, float linLower, float linUpper,
  float angLower, float angUpper) {}

int zbtSetSliderSoftness(int constraintId, float dirLin, float dirAng,
  float limLin, float limAng, float orthoLin, float orthoAng) {}

int zbtSetSliderRestitution(int constraintId, float dirLin, float dirAng,
  float limLin, float limAng, float orthoLin, float orthoAng) {}

int zbtSetSliderDamping(int constraintId, float dirLin, float dirAng,
  float limLin, float limAng, float orthoLin, float orthoAng) {}

int zbtEnableSliderMotor(int constraintId,
  int bEnableLinMotor, float targetLinVelocity, float maxLinForce,
  int bEnableAngMotor, float targetAngVelocity, float maxAngForce) {}

int zbtAddGeneric6DofConstraint(int rigidBodyAId, int rigidBodyBId,
	float pivotAx, float pivotAy, float pivotAz,
	float pivotBx, float pivotBy, float pivotBz,
	float rotAx, float rotAy, float rotAz,
	float rotBx, float rotBy, float rotBz,
  int bUseLinearReferenceFrameA, int bDisableCollision) {}

int zbtSetGeneric6DofLimits(int constraintId, int axis, float lo, float hi) {}

int zbtSetGeneric6DofLinearLimits(int constraintId,
  float lowerX, float lowerY, float lowerZ,
  float upperX, float upperY, float upperZ) {}

int zbtSetGeneric6DofAngularLimits(int constraintId,
  float lowerX, float lowerY, float lowerZ,
	float upperX, float upperY, float upperZ) {}

int zbtDeleteConstraint(int constraintId) {}

// Collision objects (in general)

int zbtSetFriction(int collisionObjectId, float friction) {}

int zbtSetRestitution(int collisionObjectId, float restitution) {}

int zbtSetHitFraction(int collisionObjectId, float hitFraction ) {}

int zbtGetPosition(int collisionObjectId, ref float x, ref float y, ref float z) {}

int zbtSetPosition(int collisionObjectId, float x, float y, float z) {}

int zbtGetRotation(int collisionObjectId, ref float rx, ref float ry, ref float rz) {}

int zbtSetRotation(int collisionObjectId, float rx, float ry, float rz) {}

// Activation and deactivation

int zbtIsActive(int collisionObjectId) {}

int zbtActivate(int collisionObjectId, int bForceActivation) {}

int zbtSetActivationState(int collisionObjectId, int newState) {}

int zbtSetDeactivationTime(int collisionObjectId, float time) {}

int zbtSetDeactivationThresholds(int rigidBodyId, float linear, float angular) {}

// Collision detection

int zbtGetCollisionNum() {}

int zbtGetCollisionObjects(int index, ref int collisionObject1,
  ref int collisionObject2) {}

int zbtGetCollisionOfNum(int collisionObjectId){}

int zbtIsCollidedWith(int collisionObjectId1, int collisionObjectId2) {}

// Raycasting

int zbtRayTest(float fromX, float fromY, float fromZ,
  float toX, float toY, float toZ) {}

int zbtGetRayTestHitPoint(ref float x, ref float y, ref float z) {}

int zbtGetRayTestHitNormal(ref float x, ref float y, ref float z) {}
