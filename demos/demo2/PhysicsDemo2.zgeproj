<?xml version="1.0" encoding="iso-8859-1" ?>
<ZApplication Name="App" Comment="ZgeBullet demo #2. Created by Rado1" Caption="Physics Demo 2" ClearColor="0 0 0 1" AmbientLightColor="0.7529 0.7529 0.7529 1" ScreenMode="0" CameraPosition="73.7491 30 31.0012" CameraRotation="0.05 -0.1867 0" LightPosition="0 0 0" ViewportRatio="3" CustomViewportRatio="1.6667" ClipFar="800" MouseVisible="255" NoSound="1" AndroidPackageName="com.rado1.PhysicsDemo2">
  <OnLoaded>
    <ZExternalLibrary Comment="Bullet 3D physics" ModuleName="ZgeBullet" CallingConvention="1" BeforeInitExp="if(ANDROID) this.ModuleName = &quot;./libZgeBullet.so&quot;;">
      <Source>
<![CDATA[/*
  Adapter to the ZgeBullet Library, a wrapper for the Bullet Physics Library.
  http://bulletphysics.org

  Download Windows DLL and Android shared library from
  http://code.google.com/p/zgebullet/downloads

  Copyright (c) 2012-2014 Radovan Cervenka
*/

// Global constants

// triangle mesh types
const int ZBT_CONVEX_HULL_MESH = 1;
const int ZBT_CONCAVE_STATIC_MESH = 2;
const int ZBT_CONCAVE_DEFORMABLE_MESH = 3;

// data types for heightfield data
const int ZBT_FLOAT = 0;
const int ZBT_INTEGER = 1;

// activation states
const int ZBT_ACTIVE_TAG = 1;
const int ZBT_DISABLE_DEACTIVATION = 4;
const int ZBT_DISABLE_SIMULATION = 5;
const int ZBT_ISLAND_SLEEPING = 2;
const int ZBT_WANTS_DEACTIVATION = 3;

// limit default values
const float ZBT_DEFAULT_HINGE_SOFTNESS = 0.9;
const float ZBT_DEFAULT_HINGE_BIAS_FACTOR = 0.3;
const float ZBT_DEFAULT_HINGE_RELAXATION_FACTOR = 1.0;
const float ZBT_DEFAULT_CONE_TWIST_SOFTNESS = 0.8;
const float ZBT_DEFAULT_CONE_TWIST_BIAS_FACTOR = 0.3;
const float ZBT_DEFAULT_CONE_TWIST_RELAXATION_FACTOR = 1.0;
const int ZBT_AXIS_X_LINEAR = 0;
const int ZBT_AXIS_Y_LINEAR = 1;
const int ZBT_AXIS_Z_LINEAR = 2;
const int ZBT_AXIS_X_ANGULAR = 3;
const int ZBT_AXIS_Y_ANGULAR = 4;
const int ZBT_AXIS_Z_ANGULAR = 5;


// World

int zbtCreateWorld() {}

int zbtDestroyWorld() {}

int zbtSetWorldGravity(float x, float y, float z) {}

int zbtStepSimulation(float timeStep, int maxSubSteps, float fixedTimeStep) {}

// Collision shapes

int zbtCreateStaticPlaneShape(float normalX, float normalY, float normalZ,
	float planeConstant) {}

int zbtCreateBoxShape(float x, float y, float z) {}

int zbtCreateSphereShape(float radius) {}

int zbtCreateScalableSphereShape(float radius) {}

int zbtCreateConeShape(float radius, float height) {}

int zbtCreateCylinderShape(float radius, float height) {}

int zbtCreateCapsuleShape(float radius, float height) {}

int zbtCreateCompoundShape() {}

int zbtAddChildShape(int compoundId, int childId, float x, float y, float z,
	float rx, float ry, float rz) {}

int zbtRemoveChildShape(int compoundId, int childId) {}

int zbtCreateHeightfieldTerrainShape(xptr heightfieldData, int dataType,
	int width, int length, float heightScale, float minHeight, float maxHeight,
	int upAxis, int bFlipQuadEdges, int bDiamondSubdivision) {}

int zbtCreateConvexHullShape(xptr points, int numPoints) {}

int zbtCreateMultiSphereShape(xptr positions, xptr radiuses, int num) {}

int zbtStartTriangleMeshShape() {}

int zbtAddTriangle(float x1,float y1,float z1,
	float x2,float y2,float z2,float x3,float y3,float z3) {}

int zbtFinishTriangleMeshShape(int meshType) {}

int zbtSetShapeLocalScaling(int shapeId, float x, float y, float z) {}

int zbtSetShapeMargin(int shapeId, float margin) {}

int zbtDeleteShape(int shapeId) {}

int zbtDeleteAllShapes() {}

// Rigid bodies

int zbtAddRigidBody(float mass, int shapeId, float x, float y, float z,
	float rx, float ry, float rz) {}

int zbtDeleteRigidBody(int rigidBodyId) {}

int zbtSetMass(int rigidBodyId, float mass) {}

int zbtSetDamping(int rigidBodyId, float linDamping, float angDamping) {}

int zbtSetLinearFactor(int rigidBodyId, float x, float y, float z) {}

int zbtSetAngularFactor(int rigidBodyId, float x, float y, float z) {}

int zbtSetGravity(int rigidBodyId, float x, float y, float z) {}

int zbtGetLinearVelocity(int rigidBodyId, ref float x, ref float y, ref float z) {}

int zbtSetLinearVelocity(int rigidBodyId, float x, float y, float z) {}

int zbtGetAngularVelocity(int rigidBodyId, ref float x, ref float y, ref float z) {}

int zbtSetAngularVelocity(int rigidBodyId, float x, float y, float z) {}

int zbtApplyCentralImpulse(int rigidBodyId, float x, float y, float z) {}

int zbtApplyTorqueImpulse(int rigidBodyId, float rx, float ry, float rz) {}

int zbtApplyImpulse(int rigidBodyId, float x, float y, float z,
	float relX, float relY, float relZ) {}

// Constraints and limits

int zbtAreConnected(int rigidBodyAId, int rigidBodyBId) {}

int zbtAddPoint2PointConstraint(int rigidBodyAId, int rigidBodyBId,
	float pivotAx, float pivotAy, float pivotAz,
	float pivotBx, float pivotBy, float pivotBz, int bDisableCollision) {}

int zbtAddPoint2PointConstraint1(int rigidBodyId,
	float pivotX, float pivotY, float pivotZ, int bDisableCollision) {}

int zbtAddHingeConstraint(int rigidBodyAId, int rigidBodyBId,
	float pivotAx, float pivotAy, float pivotAz,
	float pivotBx, float pivotBy, float pivotBz,
	float axisAx, float axisAy, float axisAz,
	float axisBx, float axisBy, float axisBz, int bDisableCollision) {}

int zbtAddHingeConstraint1(int rigidBodyId,
	float pivotX, float pivotY, float pivotZ,
	float axisX, float axisY, float axisZ, int bDisableCollision) {}

int zbtSetHingeLimits(int constraintId, float low, float high,
	float softness, float biasFactor, float relaxationFactor) {}

int zbtEnableHingeAngularMotor(int constraintId, int bEnableMotor,
	float targetVelocity, float maxMotorImpulse) {}

int zbtAddConeTwistConstraint(int rigidBodyAId, int rigidBodyBId,
	float pivotAx, float pivotAy, float pivotAz,
	float pivotBx, float pivotBy, float pivotBz,
	float rotAx, float rotAy, float rotAz,
	float rotBx, float rotBy, float rotBz, int bDisableCollision) {}

int zbtAddConeTwistConstraint1(int rigidBodyId,
	float pivotX, float pivotY, float pivotZ,
	float rotX, float rotY, float rotZ, int bDisableCollision) {}

int zbtSetConeTwistLimits(int constraintId,
	float swingX, float swingY, float swingZ,
	float softness, float biasFactor, float relaxationFactor) {}

int zbtAddSliderConstraint(int rigidBodyAId, int rigidBodyBId,
	float pivotAx, float pivotAy, float pivotAz,
	float pivotBx, float pivotBy, float pivotBz,
	float rotAx, float rotAy, float rotAz,
	float rotBx, float rotBy, float rotBz, int bUseLinearReferenceFrameA,
	int bDisableCollision) {}

int zbtSetSliderLimits(int constraintId, float linLower, float linUpper,
	float angLower, float angUpper) {}

int zbtSetSliderSoftness(int constraintId, float dirLin, float dirAng,
	float limLin, float limAng, float orthoLin, float orthoAng) {}

int zbtSetSliderRestitution(int constraintId, float dirLin, float dirAng,
	float limLin, float limAng, float orthoLin, float orthoAng) {}

int zbtSetSliderDamping(int constraintId, float dirLin, float dirAng,
	float limLin, float limAng, float orthoLin, float orthoAng) {}

int zbtEnableSliderMotor(int constraintId,
	int bEnableLinMotor, float targetLinVelocity, float maxLinForce,
	int bEnableAngMotor, float targetAngVelocity, float maxAngForce) {}

int zbtAddGeneric6DofConstraint(int rigidBodyAId, int rigidBodyBId,
	float pivotAx, float pivotAy, float pivotAz,
	float pivotBx, float pivotBy, float pivotBz,
	float rotAx, float rotAy, float rotAz,
	float rotBx, float rotBy, float rotBz,
	int bUseLinearReferenceFrameA, int bDisableCollision) {}

int zbtSetGeneric6DofLimits(int constraintId, int axis, float lo, float hi) {}

int zbtSetGeneric6DofLinearLimits(int constraintId,
	float lowerX, float lowerY, float lowerZ,
	float upperX, float upperY, float upperZ) {}

int zbtSetGeneric6DofAngularLimits(int constraintId,
	float lowerX, float lowerY, float lowerZ,
	float upperX, float upperY, float upperZ) {}

int zbtDeleteConstraint(int constraintId) {}

// Raycast vehicle

// use before zbtCreateRaycastVehicle or zbtAddWheel
int zbtSetVehicleTunning(float suspStiffness, float suspCompression,
	float suspDamping, float maxSuspTravelCm, float maxSuspForce,
	float frictionSlip) {}

int zbtCreateRaycastVehicle(int rigidBodyId,
	int rightIndex, int upIndex, int forwardIndex) {}

int zbtAddWheel(int vehicleId,
	float connectionPointX, float connectionPointY, float connectionPointZ,
	float directionX, float directionY, float directionZ,
	float wheelAxleX, float wheelAxleY, float wheelAxleZ,
	float wheelRadius, float suspRestLength, int bIsFrontWheel) {}

int zbtSetWheelIsFront(int vehicleId, int wheelId, int bIsFront) {}

int zbtSetWheelRadius(int vehicleId, int wheelId, float radius) {}

int zbtSetWheelEngineForce(int vehicleId, int wheelId, float engineForce) {}

int zbtSetWheelBreakAmount(int vehicleId, int wheelId, float brakeAmount) {}

int zbtSetWheelRollInfluence(int vehicleId, int wheelId, float rollInfluence) {}

int zbtSetWheelFrictionSlip(int vehicleId, int wheelId, float frictionSlip) {}

int zbtSetWheelSuspRestLength(int vehicleId, int wheelId, float suspRestLength) {}

int zbtSetWheelMaxSuspTravel(int vehicleId, int wheelId, float maxSuspTravel) {}

int zbtSetWheelSuspStiffness(int vehicleId, int wheelId, float suspStiffness) {}

int zbtSetWheelDampingCompression(int vehicleId, int wheelId, float dampingCompression) {}

int zbtSetWheelDampingRelaxation(int vehicleId, int wheelId, float dampingRelaxation) {}

int zbtSetVehicleSteeringValue(int vehicleId, int wheelId, float steering) {}

int zbtSetVehicleEngineForce(int vehicleId, int wheelId, float force) {}

int zbtSetVehicleBrake(int vehicleId, int wheelId, float brake) {}

int zbtSetVehiclePitchControl(int vehicleId, float pitch) {}

int zbtResetVehicleSusp(int vehicleId) {}

float zbtGetVehicleCurrentSpeed(int vehicleId) {}

int zbtGetWheelPosition(int vehicleId, int wheelId, ref float x, ref float y, ref float z) {}

int zbtGetWheelRotation(int vehicleId, int wheelId, ref float rx, ref float ry, ref float rz) {}
int zbtGetWheelPosRot(int vehicleId, int wheelId,
	ref float x, ref float y, ref float z, ref float rx, ref float ry, ref float rz) {}

int zbtDeleteRaycastVehicle(int vehicleId) {}

// Collision objects (in general)

int zbtSetFriction(int collisionObjectId, float friction) {}

int zbtSetRestitution(int collisionObjectId, float restitution) {}

int zbtSetHitFraction(int collisionObjectId, float hitFraction) {}

int zbtGetPosition(int collisionObjectId, ref float x, ref float y, ref float z) {}

int zbtSetPosition(int collisionObjectId, float x, float y, float z) {}

int zbtGetRotation(int collisionObjectId, ref float rx, ref float ry, ref float rz) {}

int zbtSetRotation(int collisionObjectId, float rx, float ry, float rz) {}

int zbtGetPosRot(int collisionObjectId, ref float x, ref float y, ref float z,
	ref float rx, ref float ry, ref float rz) {}

// Activation and deactivation

int zbtIsActive(int collisionObjectId) {}

int zbtActivate(int collisionObjectId, int bForceActivation) {}

int zbtSetActivationState(int collisionObjectId, int newState) {}

int zbtSetDeactivationTime(int collisionObjectId, float time) {}

int zbtSetDeactivationThresholds(int rigidBodyId, float linear, float angular) {}

// Collision detection

int zbtGetCollisionNum() {}

int zbtGetCollisionObjects(int index, ref int collisionObject1,
  ref int collisionObject2) {}

int zbtGetCollisionOfNum(int collisionObjectId){}

int zbtIsCollidedWith(int collisionObjectId1, int collisionObjectId2) {}

// Raycasting

int zbtRayTest(float fromX, float fromY, float fromZ,
  float toX, float toY, float toZ) {}

int zbtGetRayTestHitPoint(ref float x, ref float y, ref float z) {}

int zbtGetRayTestHitNormal(ref float x, ref float y, ref float z) {}]]>
      </Source>
    </ZExternalLibrary>
    <ZLibrary Comment="Globals">
      <Source>
<![CDATA[// CONSTANTS

// boolean
const int FALSE = 0;
const int TRUE = 1;

// goniometric
const float PIx2 = PI * 2.0;
const float ROT90 = 0.25;

// VARIABLES
int SphereShapeId;
float[10,10] Terrain;
float TerrainGenOffset;
int NumberOfSpheres;]]>
      </Source>
    </ZLibrary>
    <ZExpression Comment="Init">
      <Expression>
<![CDATA[// init random seed
setRandomSeed(getSystemTime());

// init physical world
zbtCreateWorld();
zbtSetWorldGravity(0, -10, 0);

// create sphere collision shape
SphereShapeId = zbtCreateSphereShape(1.0);

// create terrain
TerrainGenOffset = rnd()*100;
@RefreshContent(Component: TerrainMesh);
int sh = zbtCreateHeightfieldTerrainShape(Terrain, ZBT_FLOAT, 10, 10, 0, -2, 2, ZBT_AXIS_Y_LINEAR, FALSE, FALSE);
zbtSetShapeLocalScaling(sh, 9, 10, 9);
int rb = zbtAddRigidBody(0, sh, 0, 0, 0, 0, 0, 0);
zbtSetFriction(rb, 1);

// reset sphere counter
NumberOfSpheres = 0;
SphereCount.Text = "0";]]>
      </Expression>
    </ZExpression>
  </OnLoaded>
  <OnClose>
    <ZExpression>
      <Expression>
<![CDATA[// destroy physical world, collision shapes and height lists
zbtDestroyWorld();
zbtDeleteAllShapes();]]>
      </Expression>
    </ZExpression>
  </OnClose>
  <OnUpdate>
    <ZExpression Comment="Update simulation and rotate camera">
      <Expression>
<![CDATA[// simulation step
float t = App.DeltaTime;
zbtStepSimulation(t, 3, t/2);

// rotate camera
t = App.Time / 30;
App.CameraPosition.X = cos(t * PIx2) * 80;
App.CameraPosition.Z = sin(t * PIx2) * 80;
App.CameraRotation.Y = t - ROT90;]]>
      </Expression>
    </ZExpression>
    <Timer Comment="Spawn spheres" Interval="0.5">
      <OnTimer>
        <SpawnModel Model="SphereModel"/>
      </OnTimer>
    </Timer>
    <Condition Comment="Android?" Expression="return ANDROID;">
      <OnTrue>
        <ZExpression Comment="Handle touches">
          <Expression>
<![CDATA[if(touchGetCount() == 1) // 1 touchGetCount point - update terrain
  @CallComponent(Component: UpdateTerrain);
else if(touchGetCount() > 1) // more than 1 touch - remove spheres
  @RemoveAllModels();]]>
          </Expression>
        </ZExpression>
      </OnTrue>
      <OnFalse>
        <KeyPress Comment="LMB - change terrain" Keys="{">
          <OnPressed>
            <Group Name="UpdateTerrain">
              <Children>
                <ZExpression Expression="TerrainGenOffset += App.DeltaTime / 5;"/>
                <RefreshContent Component="TerrainMesh"/>
              </Children>
            </Group> <!-- UpdateTerrain -->

          </OnPressed>
        </KeyPress>
        <KeyPress Comment="Space - remove spheres" Keys=" " RepeatDelay="0.5">
          <OnPressed>
            <RemoveAllModels/>
          </OnPressed>
        </KeyPress>
      </OnFalse>
    </Condition>
  </OnUpdate>
  <OnRender>
    <RenderTransformGroup Comment="Sky" Scale="150 100 150" Translate="0 15 0">
      <Children>
        <UseMaterial Material="SkyMaterial"/>
        <RenderMesh Mesh="SphereMesh"/>
      </Children>
    </RenderTransformGroup>
    <RenderTransformGroup Comment="Ground" Scale="40 40 10" Rotate="-0.25 -0.25 0">
      <Children>
        <UseMaterial Material="TerrainMaterial"/>
        <RenderMesh Mesh="TerrainMesh"/>
      </Children>
    </RenderTransformGroup>
    <UseMaterial Material="DigitsMaterial"/>
    <RenderText Comment="FPS" TextFloatRef="App FpsCounter" X="-0.97" Y="0.9" Scale="0.5" Align="1"/>
    <RenderText Name="SphereCount" Text="0" X="0.78" Y="0.9" Scale="0.5" Align="1"/>
  </OnRender>
  <Lights>
    <Light Position="20 50 20" Color="1 1 0 1" SpotDirection="0 -1 0" SpotCutoff="0"/>
  </Lights>
  <Content>
    <Group Comment="Artwork">
      <Children>
        <Group Comment="Meshes">
          <Children>
            <Mesh Name="SphereMesh">
              <Producers>
                <MeshBox Scale="1 0.5 1" XCount="18" YCount="12" Grid2DOnly="255"/>
                <MeshExpression AutoNormals="0">
                  <Expression>
<![CDATA[//

        float E, A, C, X, Y, Z;

        // Convert range to radians

        E = this.V.Y*PI; // Elevation
        A = this.V.X*PI; // Azimuth

        // Convert spherical coordinates into cartesian

        C = cos(E);

        X = sin(A)*C;
        Y = sin(E);
        Z = cos(A)*C;

        // Assign coordinates

        this.V.X = X;
        this.V.Y = Y;
        this.V.Z = Z;

        this.N.X = X;
        this.N.Y = Y;
        this.N.Z = Z;]]>
                  </Expression>
                </MeshExpression>
              </Producers>
            </Mesh>
            <Mesh Name="TerrainMesh">
              <Producers>
                <MeshBox XCount="8" YCount="8" Grid2DOnly="255"/>
                <MeshExpression VertexColors="255">
                  <Expression>
<![CDATA[//V : current vertex
//N : current normal (turn off AutoNormals when modifying normals)
//C : current color (turn on VertexColors)
//TexCoord : current texture coordinate (turn on HasTexCoords)
float h = noise3(this.V.X*2, this.V.Y*2, TerrainGenOffset)*2 + 0.6;
this.V.Z = h;
this.C.R = h+0.5;
this.C.G = h/2;
Terrain[floor((this.V.X+1)*4.9), floor((this.V.Y+1)*4.9)] = h;]]>
                  </Expression>
                </MeshExpression>
              </Producers>
            </Mesh>
          </Children>
        </Group>
        <Group Comment="Bitmaps and Materials">
          <Children>
            <Material Name="ObjectMaterial" WireframeWidth="0" SpecularColor="0 0 0 1" EmissionColor="0 0 0 1"/>
            <Bitmap Name="TerrainBitmap" Filter="2">
              <Producers>
                <BitmapExpression UseBlankSource="1" Expression="this.Pixel = x &gt; 0.9 || y &gt; 0.9 ? 0 :1;"/>
              </Producers>
            </Bitmap>
            <Material Name="TerrainMaterial" WireframeWidth="1" Color="1 0.502 1 0.5" SpecularColor="0 0 0 1" EmissionColor="0 0 0 1" DrawBackFace="255">
              <Textures>
                <MaterialTexture Texture="TerrainBitmap" TextureScale="100 100 1" TextureWrapMode="1" TexCoords="1"/>
              </Textures>
            </Material>
            <Bitmap Name="SkyBitmap" Width="0" Height="3" Filter="2">
              <Producers>
                <BitmapFromFile Comment="Imported from sky.png">
                  <BitmapFile>
<![CDATA[78DAB5D8F946C4511806E0F67D99F67ED7111189212211318C88884444242212119188881111912122464444222212119168DFF7BDAEE1F9239E0B98E59CEFBCDF1B54FD06A4DA54D6FC985A535187C2DFA6DE94377C994653D6849A3F4D8B298D7C98A82969456DEFA6DD1477BC994E53D485BA5F4D8F09F5BE983E53D88F069ECDA029187A32C3267F048D3E9A319337FE60264CEE249ABA37D326277667664CF62C9ABB35F3266BE1C6C44DE6225ABA36CB26237165564CFA2A5ABB34EB266DE3C26C9AD42DB47D6E764CCAEE99D933C9FBE8E0D41C9AA4A31373FCCFF0F3E8F7E5DF13FF2F3D0F7ADEF43CF37DC1FBA8F75DE789CE2B9E87386F759EEB7BA1EF11BF77F89EEA7BAD7940F306E719CC4B9AC734EF699EE4BC8A7958F3B6E679DD17781FC17D47F729DDD7741FE47D13F759DD97751FD77D9FFB04EC2BB40FD1BE45FB1CEE8BB08FD2BE4BFB34EDEBB80FC4BE51FB4CED4BB58FE5BE17FB64EDABB50FD7BE3DC03EFF0FB9DE52F5]]>
                  </BitmapFile>
                </BitmapFromFile>
              </Producers>
            </Bitmap>
            <Material Name="SkyMaterial" WireframeWidth="0" Light="0" SpecularColor="0 0 0 1" EmissionColor="0 0 0 1" DrawBackFace="255">
              <Textures>
                <MaterialTexture Texture="SkyBitmap" TextureScale="1 1 0" TextureY="0.1" TexCoords="1" Origin="0 0 0"/>
              </Textures>
            </Material>
            <Bitmap Name="DigitsBitmap" Width="3" Height="0">
              <Producers>
                <BitmapFromFile Comment="Imported from Digits.bmp" Transparency="1">
                  <BitmapFile>
<![CDATA[78DAED583BAE22410C7CC7E5101C8113700172726252524242324232B6F44A2A59FEB567B52BBDE07580861EB7DB2E7FBA7ABEBE7EC78F1897CBE5F57A7D3E1FFCE2B91786D8E3F18893D590CCF97CC642CD3F9FCFEBF5BAB48D4BEC4CD4839974EDF1789464E51A0576BB5D65005EDD6E37E2433DF8EBE4DFEFB7DEDEEFF7C3E130071FDAB010AB601E8DC1F356FC018294B861171273CE431833B07CBFDF6FC29F7AA49F5BE3D72DC446825DAE45316085798090EECEB73012028DD9720A0F8C54A530D56F01A7FE268229FE0C410F66CCB1D3E9B40C77C43FEA41FE43C6C69A7E39B4A3D8B204185CE714FE5620D88D26D5CDE4B7FAA9BC095FB335430054E7D5C7CAB59DD00DA6932BA5D42A483ABF22A4D8CE8A2D4BA0723666C512D86176A9C0FF027F25CC3C048477728EF4FE3A475EDF638E1BE6119AD4BC743E8D63AC916509B095F539B909FF4D2188FD070663779BB7CB4CB381ABCAA10AB72B815862B4D095065BB47590673471E3613101AA92E95D9EA86508403F52AE65CFCDA80A10D9C909FED0E65062381C9EF1B09B9400BC787F0F9ACD670B3E529DC8EB14862A7AB7B4FC3FE1AFCA8D1D58CD046FD3F2244AA294D1189210174797EDA2A6582E66D2D3ADAA0498DEE29F919CA48C852931C1FF9FF79F09AF636933461110DB8552FEC92414C815A5E13968DB42C3F3AB12607A33FF510BD1E6ADBD2E368A4D080FF1671CD38AB679556953178AF833ABFBAD99ED9BEE415509D000011E6D6E5CE8CFE84DFC1356B1E9CDF14F833B942114D831E28F99A55FF4A2BF59546D33B632E76FE45A31CD18A6E52D6C7EFF62A4C80722FEF0D735732260792C661C29A24C0526BB508AFF8411B104969F5352C263ED8C55EC66D8EADD3710E6D5A40009B8FDFE50458DD7BA147FDAA07B3AA17314881104DAE409926998AA4EBD14D8EA4347DC515F0F6C925C8AE1524233EE3E18D1D6594F99C9FD575B108AE5F7B72AFF594A3AEC18D0187DF513C9A41CD59567E43FF3DB19346017C5D1E6EDFCAE0723C527F190268C60273EBD5FBFE3278C3FFC4DB206]]>
                  </BitmapFile>
                </BitmapFromFile>
              </Producers>
            </Bitmap>
            <Font Name="DigitsFont" Bitmap="DigitsBitmap" FirstChar="48" CharPixelWidth="12" CharPixelHeight="16"/>
            <Material Name="DigitsMaterial" Light="0" Blend="2" Font="DigitsFont"/>
          </Children>
        </Group>
      </Children>
    </Group>
    <Group Comment="Models">
      <Children>
        <Model Name="SphereModel" Position="-33.7846 3.3394 11.3442" Category="1" RenderOrder="1">
          <Definitions>
            <Variable Name="SphereId" Type="1"/>
          </Definitions>
          <OnRender>
            <UseMaterial Material="ObjectMaterial"/>
            <RenderSetColor Name="SphereColor" Color="0.9404 0.2947 0.476 1"/>
            <RenderMesh Mesh="SphereMesh"/>
          </OnRender>
          <OnUpdate>
            <ZExpression Comment="Update position and rotation">
              <Expression>
<![CDATA[// update position and rotation
zbtGetPosition(SphereId, CurrentModel.Position.X, CurrentModel.Position.Y, CurrentModel.Position.Z);
zbtGetRotation(SphereId, CurrentModel.Rotation.X, CurrentModel.Rotation.Y, CurrentModel.Rotation.Z);]]>
              </Expression>
            </ZExpression>
            <Condition Comment="Remove if too low" Expression="return CurrentModel.Position.Y &lt; -30;">
              <OnTrue>
                <RemoveModel/>
              </OnTrue>
            </Condition>
          </OnUpdate>
          <OnSpawn>
            <ZExpression Comment="Init">
              <Expression>
<![CDATA[// create rigid body
SphereId = zbtAddRigidBody(0.1, SphereShapeId, 0, 20, 0, 0, 0, 0);

// set physical properties
zbtSetDamping(SphereId, 0.1, 0.1);
//zbtSetActivationState(rbId, TRUE);
zbtSetDeactivationThresholds(SphereId, 0, 0);
zbtSetLinearVelocity(SphereId, random(0,7), 0, random(0,7));
zbtSetAngularVelocity(SphereId, random(0,1), random(0,1), random(0,1));

// set color
SphereColor.Color.R = rnd() + 0.1;
SphereColor.Color.G = rnd() + 0.1;
SphereColor.Color.B = rnd() + 0.1;

// update count
SphereCount.Text = intToStr(++NumberOfSpheres);]]>
              </Expression>
            </ZExpression>
          </OnSpawn>
          <OnRemove>
            <ZExpression Comment="Delete rigid body and shape">
              <Expression>
<![CDATA[zbtDeleteRigidBody(SphereId);

// update count
SphereCount.Text = intToStr(--NumberOfSpheres);]]>
              </Expression>
            </ZExpression>
          </OnRemove>
        </Model>
      </Children>
    </Group>
  </Content>
</ZApplication>
